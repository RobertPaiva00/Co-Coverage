// Generated by gencpp from file co_coverage/SubteamParameters.msg
// DO NOT EDIT!


#ifndef CO_COVERAGE_MESSAGE_SUBTEAMPARAMETERS_H
#define CO_COVERAGE_MESSAGE_SUBTEAMPARAMETERS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace co_coverage
{
template <class ContainerAllocator>
struct SubteamParameters_
{
  typedef SubteamParameters_<ContainerAllocator> Type;

  SubteamParameters_()
    : header()
    , lid(0.0)
    , lambda(0.0)
    , tau_delta(0.0)
    , mu(0.0)
    , gamma(0.0)
    , angle_desired(0.0)
    , curve(0)
    , order_inv()  {
    }
  SubteamParameters_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lid(0.0)
    , lambda(0.0)
    , tau_delta(0.0)
    , mu(0.0)
    , gamma(0.0)
    , angle_desired(0.0)
    , curve(0)
    , order_inv(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _lid_type;
  _lid_type lid;

   typedef double _lambda_type;
  _lambda_type lambda;

   typedef double _tau_delta_type;
  _tau_delta_type tau_delta;

   typedef double _mu_type;
  _mu_type mu;

   typedef double _gamma_type;
  _gamma_type gamma;

   typedef double _angle_desired_type;
  _angle_desired_type angle_desired;

   typedef uint8_t _curve_type;
  _curve_type curve;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _order_inv_type;
  _order_inv_type order_inv;





  typedef boost::shared_ptr< ::co_coverage::SubteamParameters_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::co_coverage::SubteamParameters_<ContainerAllocator> const> ConstPtr;

}; // struct SubteamParameters_

typedef ::co_coverage::SubteamParameters_<std::allocator<void> > SubteamParameters;

typedef boost::shared_ptr< ::co_coverage::SubteamParameters > SubteamParametersPtr;
typedef boost::shared_ptr< ::co_coverage::SubteamParameters const> SubteamParametersConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::co_coverage::SubteamParameters_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::co_coverage::SubteamParameters_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::co_coverage::SubteamParameters_<ContainerAllocator1> & lhs, const ::co_coverage::SubteamParameters_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.lid == rhs.lid &&
    lhs.lambda == rhs.lambda &&
    lhs.tau_delta == rhs.tau_delta &&
    lhs.mu == rhs.mu &&
    lhs.gamma == rhs.gamma &&
    lhs.angle_desired == rhs.angle_desired &&
    lhs.curve == rhs.curve &&
    lhs.order_inv == rhs.order_inv;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::co_coverage::SubteamParameters_<ContainerAllocator1> & lhs, const ::co_coverage::SubteamParameters_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace co_coverage

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::co_coverage::SubteamParameters_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::co_coverage::SubteamParameters_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::co_coverage::SubteamParameters_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::co_coverage::SubteamParameters_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::co_coverage::SubteamParameters_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::co_coverage::SubteamParameters_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::co_coverage::SubteamParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d9c99d86e077aca9b38aebac11d6f8df";
  }

  static const char* value(const ::co_coverage::SubteamParameters_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd9c99d86e077aca9ULL;
  static const uint64_t static_value2 = 0xb38aebac11d6f8dfULL;
};

template<class ContainerAllocator>
struct DataType< ::co_coverage::SubteamParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "co_coverage/SubteamParameters";
  }

  static const char* value(const ::co_coverage::SubteamParameters_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::co_coverage::SubteamParameters_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float64 lid\n"
"float64 lambda\n"
"float64 tau_delta\n"
"float64 mu\n"
"float64 gamma\n"
"float64 angle_desired\n"
"uint8 curve\n"
"int32[] order_inv\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::co_coverage::SubteamParameters_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::co_coverage::SubteamParameters_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lid);
      stream.next(m.lambda);
      stream.next(m.tau_delta);
      stream.next(m.mu);
      stream.next(m.gamma);
      stream.next(m.angle_desired);
      stream.next(m.curve);
      stream.next(m.order_inv);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SubteamParameters_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::co_coverage::SubteamParameters_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::co_coverage::SubteamParameters_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lid: ";
    Printer<double>::stream(s, indent + "  ", v.lid);
    s << indent << "lambda: ";
    Printer<double>::stream(s, indent + "  ", v.lambda);
    s << indent << "tau_delta: ";
    Printer<double>::stream(s, indent + "  ", v.tau_delta);
    s << indent << "mu: ";
    Printer<double>::stream(s, indent + "  ", v.mu);
    s << indent << "gamma: ";
    Printer<double>::stream(s, indent + "  ", v.gamma);
    s << indent << "angle_desired: ";
    Printer<double>::stream(s, indent + "  ", v.angle_desired);
    s << indent << "curve: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.curve);
    s << indent << "order_inv[]" << std::endl;
    for (size_t i = 0; i < v.order_inv.size(); ++i)
    {
      s << indent << "  order_inv[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.order_inv[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CO_COVERAGE_MESSAGE_SUBTEAMPARAMETERS_H
