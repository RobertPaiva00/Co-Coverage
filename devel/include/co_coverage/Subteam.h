// Generated by gencpp from file co_coverage/Subteam.msg
// DO NOT EDIT!


#ifndef CO_COVERAGE_MESSAGE_SUBTEAM_H
#define CO_COVERAGE_MESSAGE_SUBTEAM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace co_coverage
{
template <class ContainerAllocator>
struct Subteam_
{
  typedef Subteam_<ContainerAllocator> Type;

  Subteam_()
    : header()
    , order()
    , num_robots(0)
    , inlid(0.0)
    , inlambda(0.0)
    , intau_delta(0.0)
    , inmu(0.0)
    , ingamma(0.0)
    , inangle_desired(0.0)  {
    }
  Subteam_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , order(_alloc)
    , num_robots(0)
    , inlid(0.0)
    , inlambda(0.0)
    , intau_delta(0.0)
    , inmu(0.0)
    , ingamma(0.0)
    , inangle_desired(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _order_type;
  _order_type order;

   typedef int32_t _num_robots_type;
  _num_robots_type num_robots;

   typedef float _inlid_type;
  _inlid_type inlid;

   typedef float _inlambda_type;
  _inlambda_type inlambda;

   typedef float _intau_delta_type;
  _intau_delta_type intau_delta;

   typedef float _inmu_type;
  _inmu_type inmu;

   typedef float _ingamma_type;
  _ingamma_type ingamma;

   typedef float _inangle_desired_type;
  _inangle_desired_type inangle_desired;





  typedef boost::shared_ptr< ::co_coverage::Subteam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::co_coverage::Subteam_<ContainerAllocator> const> ConstPtr;

}; // struct Subteam_

typedef ::co_coverage::Subteam_<std::allocator<void> > Subteam;

typedef boost::shared_ptr< ::co_coverage::Subteam > SubteamPtr;
typedef boost::shared_ptr< ::co_coverage::Subteam const> SubteamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::co_coverage::Subteam_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::co_coverage::Subteam_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::co_coverage::Subteam_<ContainerAllocator1> & lhs, const ::co_coverage::Subteam_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.order == rhs.order &&
    lhs.num_robots == rhs.num_robots &&
    lhs.inlid == rhs.inlid &&
    lhs.inlambda == rhs.inlambda &&
    lhs.intau_delta == rhs.intau_delta &&
    lhs.inmu == rhs.inmu &&
    lhs.ingamma == rhs.ingamma &&
    lhs.inangle_desired == rhs.inangle_desired;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::co_coverage::Subteam_<ContainerAllocator1> & lhs, const ::co_coverage::Subteam_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace co_coverage

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::co_coverage::Subteam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::co_coverage::Subteam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::co_coverage::Subteam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::co_coverage::Subteam_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::co_coverage::Subteam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::co_coverage::Subteam_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::co_coverage::Subteam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "01d15b4fb8b52d79a988fadb9fea105f";
  }

  static const char* value(const ::co_coverage::Subteam_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x01d15b4fb8b52d79ULL;
  static const uint64_t static_value2 = 0xa988fadb9fea105fULL;
};

template<class ContainerAllocator>
struct DataType< ::co_coverage::Subteam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "co_coverage/Subteam";
  }

  static const char* value(const ::co_coverage::Subteam_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::co_coverage::Subteam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int32[] order\n"
"int32 num_robots\n"
"float32 inlid\n"
"float32 inlambda\n"
"float32 intau_delta\n"
"float32 inmu\n"
"float32 ingamma\n"
"float32 inangle_desired\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::co_coverage::Subteam_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::co_coverage::Subteam_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.order);
      stream.next(m.num_robots);
      stream.next(m.inlid);
      stream.next(m.inlambda);
      stream.next(m.intau_delta);
      stream.next(m.inmu);
      stream.next(m.ingamma);
      stream.next(m.inangle_desired);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Subteam_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::co_coverage::Subteam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::co_coverage::Subteam_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "order[]" << std::endl;
    for (size_t i = 0; i < v.order.size(); ++i)
    {
      s << indent << "  order[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.order[i]);
    }
    s << indent << "num_robots: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_robots);
    s << indent << "inlid: ";
    Printer<float>::stream(s, indent + "  ", v.inlid);
    s << indent << "inlambda: ";
    Printer<float>::stream(s, indent + "  ", v.inlambda);
    s << indent << "intau_delta: ";
    Printer<float>::stream(s, indent + "  ", v.intau_delta);
    s << indent << "inmu: ";
    Printer<float>::stream(s, indent + "  ", v.inmu);
    s << indent << "ingamma: ";
    Printer<float>::stream(s, indent + "  ", v.ingamma);
    s << indent << "inangle_desired: ";
    Printer<float>::stream(s, indent + "  ", v.inangle_desired);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CO_COVERAGE_MESSAGE_SUBTEAM_H
